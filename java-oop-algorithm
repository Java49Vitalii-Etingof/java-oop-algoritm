diff --git a/.gitignore b/.gitignore
new file mode 100644
index 0000000..4c37e53
--- /dev/null
+++ b/.gitignore
@@ -0,0 +1,4 @@
+/bin/
+/.project
+/.classpath
+.settings
diff --git a/src/telran/util/ArrayList.java b/src/telran/util/ArrayList.java
new file mode 100644
index 0000000..458023e
--- /dev/null
+++ b/src/telran/util/ArrayList.java
@@ -0,0 +1,63 @@
+package telran.util;
+
+import java.util.Arrays;
+
+public class ArrayList<T> implements List<T> {
+	private static final int DEFAULT_CAPACITY = 16;
+	private static final String T = null;
+	private T[] array;
+	private int size;
+
+	@SuppressWarnings("unchecked")
+	public ArrayList(int capacity) {
+		array = (T[]) new Object[capacity];
+	}
+
+	public ArrayList() {
+		this(DEFAULT_CAPACITY);
+	}
+
+	@Override
+	public boolean add(T obj) {
+		if (size == array.length) {
+			reallocate();
+		}
+		array[size] = obj;
+		size++;
+		return true;
+	}
+
+	private void reallocate() {
+		array = Arrays.copyOf(array, array.length * 2);
+
+	}
+
+	@Override
+	public void add(int index, T obj) {
+		if (size == array.length)
+			reallocate();
+		System.arraycopy(array, index, array, index + 1, size - index);
+		array[index] = obj;
+		size++;
+
+	}
+
+	@Override
+	public T remove(int index) {
+		T remove = array[index];
+		System.arraycopy(array, index, array, index, size - 1 - index);
+		size--;
+		return remove;
+	}
+
+	@Override
+	public T get(int index) {
+		return array[index];
+	}
+
+	@Override
+	public int size() {
+		return size;
+	}
+
+}
diff --git a/src/telran/util/Collection.java b/src/telran/util/Collection.java
new file mode 100644
index 0000000..2f7172d
--- /dev/null
+++ b/src/telran/util/Collection.java
@@ -0,0 +1,6 @@
+package telran.util;
+
+public interface Collection<T> {
+boolean add(T obj);
+int size();
+}
diff --git a/src/telran/util/List.java b/src/telran/util/List.java
new file mode 100644
index 0000000..362107f
--- /dev/null
+++ b/src/telran/util/List.java
@@ -0,0 +1,7 @@
+package telran.util;
+
+public interface List<T> extends Collection<T> {
+void add(int index, T obj);
+T remove(int index);
+T get(int index);
+}
diff --git a/src/telran/util/test/ArrayListTest.java b/src/telran/util/test/ArrayListTest.java
new file mode 100644
index 0000000..b808306
--- /dev/null
+++ b/src/telran/util/test/ArrayListTest.java
@@ -0,0 +1,45 @@
+package telran.util.test;
+
+import static org.junit.jupiter.api.Assertions.*;
+
+import java.util.ArrayList;
+
+import org.junit.jupiter.api.Test;
+
+class ArrayListTest {
+
+	@Test
+	void testAddIndex() {
+		ArrayList<Integer> numbers = new ArrayList<>();
+		for (int i = 0; i < 15; i++) {
+			numbers.add(i);
+		}
+		numbers.add(0, 50);
+		numbers.add(8, 74);
+		numbers.add(17, 13);
+		assertEquals(18, numbers.size());
+		assertEquals(50, numbers.get(0));
+		assertEquals(74, numbers.get(8));
+		assertEquals(13, numbers.get(17));
+	}
+
+	@Test
+	void TestRemove() {
+		ArrayList<Integer> numbers = new ArrayList<>();
+		numbers.add(50);
+		numbers.add(100);
+		numbers.add(150);
+		numbers.add(200);
+		numbers.add(250);
+		numbers.add(300);
+		numbers.add(350);
+		assertEquals(350, numbers.remove(6));
+		assertEquals(200, numbers.remove(3));
+		assertEquals(50, numbers.remove(0));
+		assertEquals(4, numbers.size());
+		assertEquals(100, numbers.get(0));
+		assertEquals(250, numbers.get(2));
+		assertEquals(300, numbers.get(3));
+
+	}
+}
